services:
  mcp-server:
    build: .
    container_name: mcp-server
    ports:
      - "8000:8000"  # API port
      - "9090:9090"  # Prometheus metrics port
    environment:
      - ENVIRONMENT=development
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - REDIS_URL=redis://redis:6379/0
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-development-secret-key-change-in-production}
      - LOG_LEVEL=INFO
      - PLUGIN_AUTO_RELOAD=true
      - LINKEDIN_COOKIE=${LINKEDIN_COOKIE}  # Pass LinkedIn cookie to main server
      - LINKEDIN_EXTERNAL_SERVER_URL=http://linkedin-mcp:8080  # URL to LinkedIn service
      - DOCKER_ENV=true  # Tell the app it's running in Docker
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}  # For testing Anthropic provider
    volumes:
      - ./src/plugins:/app/src/plugins  # Mount plugins for hot-reload
      - ./logs:/app/logs
    depends_on:
      - redis
      - linkedin-mcp
    networks:
      - mcp-network
    restart: unless-stopped

  # LinkedIn MCP Reference Server
  linkedin-mcp:
    build: 
      context: ./external/linkedin-mcp-server
      dockerfile: Dockerfile
    container_name: linkedin-mcp-server
    ports:
      - "8081:8080"  # Expose for external access (optional)
    environment:
      - LINKEDIN_COOKIE=${LINKEDIN_COOKIE}
      - LOG_LEVEL=INFO
    networks:
      - mcp-network
    restart: unless-stopped
    # Add health check - LinkedIn MCP server doesn't have /health endpoint
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:8080/mcp/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - mcp-network
    restart: unless-stopped

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mcp-network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - mcp-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  mcp-network:
    driver: bridge 